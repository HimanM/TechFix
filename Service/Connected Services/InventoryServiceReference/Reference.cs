//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service.InventoryServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InventoryServiceReference.InventoryServiceSoap")]
    public interface InventoryServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditInventoryQuantity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EditInventoryQuantity(int productId, int newQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditInventoryQuantity", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EditInventoryQuantityAsync(int productId, int newQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveFromInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RemoveFromInventory(int productId, int quantityToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveFromInventory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RemoveFromInventoryAsync(int productId, int quantityToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddProductToInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddProductToInventory(int productId, int supplierId, int quantityAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddProductToInventory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddProductToInventoryAsync(int productId, int supplierId, int quantityAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInventoryByProductId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInventoryByProductId(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInventoryByProductId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryByProductIdAsync(int productId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface InventoryServiceSoapChannel : Service.InventoryServiceReference.InventoryServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryServiceSoapClient : System.ServiceModel.ClientBase<Service.InventoryServiceReference.InventoryServiceSoap>, Service.InventoryServiceReference.InventoryServiceSoap {
        
        public InventoryServiceSoapClient() {
        }
        
        public InventoryServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InventoryServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string EditInventoryQuantity(int productId, int newQuantity) {
            return base.Channel.EditInventoryQuantity(productId, newQuantity);
        }
        
        public System.Threading.Tasks.Task<string> EditInventoryQuantityAsync(int productId, int newQuantity) {
            return base.Channel.EditInventoryQuantityAsync(productId, newQuantity);
        }
        
        public string RemoveFromInventory(int productId, int quantityToRemove) {
            return base.Channel.RemoveFromInventory(productId, quantityToRemove);
        }
        
        public System.Threading.Tasks.Task<string> RemoveFromInventoryAsync(int productId, int quantityToRemove) {
            return base.Channel.RemoveFromInventoryAsync(productId, quantityToRemove);
        }
        
        public string AddProductToInventory(int productId, int supplierId, int quantityAvailable) {
            return base.Channel.AddProductToInventory(productId, supplierId, quantityAvailable);
        }
        
        public System.Threading.Tasks.Task<string> AddProductToInventoryAsync(int productId, int supplierId, int quantityAvailable) {
            return base.Channel.AddProductToInventoryAsync(productId, supplierId, quantityAvailable);
        }
        
        public System.Data.DataSet GetInventoryByProductId(int productId) {
            return base.Channel.GetInventoryByProductId(productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryByProductIdAsync(int productId) {
            return base.Channel.GetInventoryByProductIdAsync(productId);
        }
    }
}
