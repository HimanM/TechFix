//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ProductService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductService.ProductServiceSoap")]
    public interface ProductServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddProduct(string name, string description, decimal price, int supplierId, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddProduct", ReplyAction="*")]
        System.Threading.Tasks.Task AddProductAsync(string name, string description, decimal price, int supplierId, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateProduct(int productId, string name, string description, decimal price, int supplierId, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProduct", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateProductAsync(int productId, string name, string description, decimal price, int supplierId, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteProduct(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteProduct", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteProductAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProductById(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProductByIdAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductBySupplierId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProductBySupplierId(int supplierId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductBySupplierId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProductBySupplierIdAsync(int supplierId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllProducts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllProducts", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProductStock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateProductStock(int productId, int supplierId, int quantityAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProductStock", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateProductStockAsync(int productId, int supplierId, int quantityAvailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductInventory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProductInventory(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductInventory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProductInventoryAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllSuppliers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAllSuppliers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllSuppliers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllSuppliersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProductServiceSoapChannel : Client.ProductService.ProductServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceSoapClient : System.ServiceModel.ClientBase<Client.ProductService.ProductServiceSoap>, Client.ProductService.ProductServiceSoap {
        
        public ProductServiceSoapClient() {
        }
        
        public ProductServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public void AddProduct(string name, string description, decimal price, int supplierId, string category) {
            base.Channel.AddProduct(name, description, price, supplierId, category);
        }
        
        public System.Threading.Tasks.Task AddProductAsync(string name, string description, decimal price, int supplierId, string category) {
            return base.Channel.AddProductAsync(name, description, price, supplierId, category);
        }
        
        public void UpdateProduct(int productId, string name, string description, decimal price, int supplierId, string category) {
            base.Channel.UpdateProduct(productId, name, description, price, supplierId, category);
        }
        
        public System.Threading.Tasks.Task UpdateProductAsync(int productId, string name, string description, decimal price, int supplierId, string category) {
            return base.Channel.UpdateProductAsync(productId, name, description, price, supplierId, category);
        }
        
        public void DeleteProduct(int productId) {
            base.Channel.DeleteProduct(productId);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(int productId) {
            return base.Channel.DeleteProductAsync(productId);
        }
        
        public System.Data.DataSet GetProductById(int productId) {
            return base.Channel.GetProductById(productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProductByIdAsync(int productId) {
            return base.Channel.GetProductByIdAsync(productId);
        }
        
        public System.Data.DataSet GetProductBySupplierId(int supplierId) {
            return base.Channel.GetProductBySupplierId(supplierId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProductBySupplierIdAsync(int supplierId) {
            return base.Channel.GetProductBySupplierIdAsync(supplierId);
        }
        
        public System.Data.DataSet GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public void UpdateProductStock(int productId, int supplierId, int quantityAvailable) {
            base.Channel.UpdateProductStock(productId, supplierId, quantityAvailable);
        }
        
        public System.Threading.Tasks.Task UpdateProductStockAsync(int productId, int supplierId, int quantityAvailable) {
            return base.Channel.UpdateProductStockAsync(productId, supplierId, quantityAvailable);
        }
        
        public System.Data.DataSet GetProductInventory(int productId) {
            return base.Channel.GetProductInventory(productId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProductInventoryAsync(int productId) {
            return base.Channel.GetProductInventoryAsync(productId);
        }
        
        public System.Data.DataSet GetAllSuppliers() {
            return base.Channel.GetAllSuppliers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllSuppliersAsync() {
            return base.Channel.GetAllSuppliersAsync();
        }
    }
}
